//let myVar : type = value

// let myName:string =  "PRAVIN"
// myName = "Ajay"
// console.log(myName);



// for number
// let myNumber : number = 14
// console.log(myNumber);


// // for boolean

// let isHard : boolean = false
// isHard = true
// console.log(isHard);


// let age : number = 21
// console.log(age);

// let isAvailible : boolean = true 
// console.log(isAvailible);


// let nname : string = 'Ajay'
// console.log(nname);


// type inference 
// let myName = 'pravin'
// console.log(typeof myName);



// function add(a:number,b:number){
//     return a + b;
// }

// console.log(add(2,4));


// any type => any type can be any value of variable type like string, number, object,array,

// let myNumber : any = "Pravin"
// console.log(myNumber);

// myNumber = 24
// console.log(myNumber);

// myNumber = true
// console.log(myNumber);


// function parameter annotation

// function add(num:number,num2:number){
//     return num + num2
// }

//  const res = add(2,3)
//  console.log(res);


// function subtract(a:number,b:number){
//     return a - b;

// }

// let resSub = subtract(2,5)
// console.log(resSub);
 

// function multiply(a:number,b:number){
//     return a * b
// }

// console.log(multiply(3,5));


// function division( a:number,b:number){
//     if(b==0){
//     console.log('cant divided by zero')
//     }else{
//         console.log(a/b);
        
//     }
// }
// division(4,2);


// function return annotaion

function add (e:number,b:number) : number // return value 
{
    return e + b
}

console.log(add(2,4));



// Arrays type in tsc

// syntax

// let arrayName : types[] = []
// let arraynamew : Array<Type> = []

// let numbers : number[] = [1,2,3,4,5]
// console.log(numbers);

// let names : string[] = ['Pravin',"Ajay","Vijay"]
// console.log(names.map(name => name.toUpperCase()));

// multiDImensional Array

// let multiDI : number[][][] = [[
//     [1,2,3,4,]
//     ,[1,2,3,4],
//     [2,4,6,3]
// ]]
// // let res = multiDI.map(nums=> nums)
// console.log('\n',multiDI);

// let multiDI: number[][][] = [
//     [
//       [1, 2, 3, 4],
//       [1, 2, 3, 4],
//       [2, 4, 6, 3]
//     ]
//   ];

// //   console.log('\n', multiDI);

// multiDI.forEach(subarr=>{
//     subarr.forEach(row=>{

//         console.log(row);
//     })

// })

// let myNames : Array<String> = ['pravin','Ajay','Vijay'];
// console.log(myNames);

//  myNames.forEach(subarr=>{
//     console.log(subarr);

//  })

// Objects

// let person : {name:string,lastName:string,age:number} = {
//     name:"Pravin",
//     lastName:"Shegamwar",
//     age:21
// }
//   console.log(person.name);
//   console.log(`My name is ${person.name} ${person.lastName} and I am ${person.age} year Old`);

// let user :{username:string; isLoggedIn:boolean} = {
//   username:"pravin",
//   isLoggedIn:true
// }

// console.log(user.username);
// console.log(user.isLoggedIn);

// type Aliases
//syntax

// type User = string;
// let user:User = 'Pravin'
// console.log(user);

// type aliases with object type

// type Person = {
//   myname:string;
//   age:number;
//   isEmployed:boolean
// }

// let person:Person = {
//   myname : "Pravin",
//   age:21,
//   isEmployed:true
// }

// let person2 : Person = {
//   myname:"Ajay",
//   age:21,
//   isEmployed:false
// }
// // let {myname,age,isEmployed} = person2
// console.log(person);

// optinal property  ? add at key with optinal

// type User = {
//   myName:string;
//   myAge:number;
//   isLoggedIn?:boolean
// }

// let user:User={
//   myName:"Pravin",
//   myAge:21,
//   isLoggedIn:true

// }

// console.log(user);

// readonly property
//readonly property is a property that can be assigned a value when the object is created, but cannot be modified afterward
// use the readonly keyword before the property name:

// type Car = {
//  readonly brand:string;
//   model:string
// }

// let car:Car={
//   brand:'BMW',
//   model:'BMW M-9'
// }

// car.brand = "Merc" //error bcs brand is readonly property
// console.log(car);


// Intersection type
// variable or object of an intersection type must satisfy all the requirements of the combined types.
// use & operator for intersection

// type a = {a:string}
// type b = {b:number}

// type combine = a & b

// let example : combine = {
//   a:"Pravin",
//   b:343
// }

// console.log(example);


// type Employed = {
//   name:string;
//   address:string;
//   email:string;
// }

// type EmployedInfo = {
//   department:string;
//   income:number
// }

// type EmlpoyedINFO = Employed & EmployedInfo

// let employed : EmlpoyedINFO = {
//   name:"Aj",
//   address:"Nagpur",
//   email:"emai.com",
//   department:'sales',
//   income:50000
// }
// console.log(employed);



